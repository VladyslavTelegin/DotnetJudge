/**
* Hard
* You're given a non-empty array of positive integers where each integer represents the maximum number of steps you can take forward in the array.
* For example, if the element at index 1 is 3, you can go from index 1 to index 2, 3, or 4. Write a function that returns the minimum number of
* jumps needed to reach the final index.
* Note that jumping from index i to index i + x always constitutes one jump, no matter how large x is.
* Example:
* [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3] => 4
*/

using System;
using System.Text;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

public class Program
{
    public static int GetMinNumberOfJumps(int[] array)
    {
        int n = array.Length;
        if (n == 1) { 
            return 0;
        }
        
        int jumps = 0;
        int maxReach = array[0];
        int steps = array[0];
        
        for (int i = 1; i < n - 1; i++)
        {
            maxReach = Math.Max(maxReach, array[i] + i);
            steps--;
            if (steps == 0)
            {
                jumps++;
                steps = maxReach - i;
            }
        }
        
        return jumps + 1;
    }
}